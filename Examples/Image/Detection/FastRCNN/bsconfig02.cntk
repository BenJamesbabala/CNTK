command=Train

precision="float"
deviceId="Auto"
parallelTrain="false"
makeMode = false

rootDir = "." ; 
dataDir  = "$rootDir$/data/" ; 
modelDir = "C:\Temp\RCNN\Output"

modelPath = "$modelDir$/RCNN-test02.bs"

ImageH = 1000
ImageW = 1000
#ImageH = 500
#ImageW = 500
ImageC = 3

NumLabels = 21
NumTrainROIs = 64

TrainROIDim = 256               # $NumTrainROIs$ * 4 
TrainROILabelDim = 1344         # $NumTrainROIs$ * $NumLabels$

numPred = 128                   # $NumTrainROIs$ * minibatchSize

#TestROIDim = 8000
#TestROINumLabels = 42000

traceLevel=1
stderr="$modelDir$/bstest02.log"

Train = [
    action = "train"
    
    BrainScriptNetworkBuilder = [
        ROIPooling (input, ROIs, shape) = new ComputationNode [ operation = 'ROIPooling' ; inputs = (ROIs:input) ; H = shape[1] ; W = shape[0] ; imageLayout = "cudnn" ; tag='' /*plus the function args*/ ] 

        # 21 x 64 x bsz, 21 x 64 x bsz
        # CrossEntropyWithSoftmax_new (L, z, tag='') = Minus (ReduceLogSum (z, axis=1), TransposeTimes (L, z),  tag=tag) 
        # CrossEntropyWithSoftmax_new2 (y, z, axis=0) = ReduceLogSum (z, axis=axis) - ReduceSum (y .* z, axis=axis)

        imageShape = $ImageH$:$ImageW$:$ImageC$    # 500:500:3
        labelShape = $NumLabels$:$NumTrainROIs$    # 21:64
        ROIShape = $TrainROIDim$                   # 256

        network = BS.Network.Load ("AlexNet.89")
        c1 = BS.Network.CloneFunction(network.features, network.pool1, parameters="constant")
        middle = BS.Network.CloneFunction(network.pool1, network.conv5_y)
        last = BS.Network.CloneFunction(network.pool3, network.h2_d)

        model (features, rois) = [
            featNorm = features         # - Constant (114)
            pool1Out = c1 (featNorm)
            conv5Out = middle (pool1Out)
            ROI = ROIPooling (conv5Out, rois, (6:6))
            h2dOut = last (ROI)
            fW = ParameterTensor((21:4096), init='gaussian', initValueScale=0.01)
            # fW = ParameterTensor((21:4096))
            fb = ParameterTensor(21, init='zero')
            ft = Times(fW, h2dOut)
            z = Plus(ft, fb)
        ].z

        features = Input (imageShape)
        roiLabels = Input (labelShape)
        rois = Input (ROIShape)

        z = model (features, rois)
        
        CrossEntropyWithSoftmaxND (y, z, axis=0) = ReduceLogSum (z, axis=axis) - ReduceSum (y .* z, axis=axis)
        ce = CrossEntropyWithSoftmaxND (roiLabels, z, axis=1)
        
        #rls = ReduceLogSum (z, axis=1)
        #rs = ReduceSum (roiLabels .* z, axis=1)
        ## why not this?: ce = rls .* Constant($NumLabels$) - rs
        #ce = rls - rs
        
        # alternative to the below
        # outMinusMax = out - amMatrix
        # invPred = BS.Boolean.If (NotEqual(outMinusMax, Constant(0)), Constant(1), Constant(0))
        # wrongPred = ElementTimes(invPred, labels)

        MyClassificationErrorND (out, labels, numLabels, numPredictions, reduceAxis=1) = {
            axmax = ReduceMax(out, axis=reduceAxis)                                         # Max per instance
            amMatrix = Constant(1, rows=numLabels) .* axmax                                 # broadcast max all rows
            pred = BS.Boolean.If (Equal(out, amMatrix), Constant(1), Constant(0))
            wrongPred = BS.Boolean.If (Greater (labels, pred), Constant(1), Constant(0))    # only count one error per prediction (pred < label)
            err = ReduceSum(wrongPred) * Constant(1 / numPredictions)
        }.err
        
        errs = MyClassificationErrorND(z, roiLabels, $NumLabels$, $numPred$, reduceAxis=1)
        
        featureNodes    = (features:rois)
        labelNodes      = (roiLabels)
        criterionNodes  = (ce)
        evaluationNodes = (errs)
        outputNodes     = (z)
    ]

    SGD = [
        epochSize=0
        minibatchSize=2
        maxEpochs=15
        #learningRatesPerSample=0.0005
        #momentumAsTimeConstant=0*35:100
        learningRatesPerMB=0.0001*5:0.0001
        momentumPerMB=0*5:0.9
        L2RegWeight=0.0001 #0.0005
        dropoutRate=0.5
        
        numMBsToShowResult=50
    ]

    reader = [
        randomize = false
        verbosity = 2
        deserializers = ([
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            #file = "$dataDir$/1k_train_stage2.rois.txt"
            file = "$dataDir$/tv2012pad.rois.txt"
            input = [
                rois = [
                    dim = $TrainROIDim$
                    format = "dense"
                ]
            ]
        ]:[
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            #file = "$dataDir$/1k_train_stage2.roilabels.txt"
            file = "$dataDir$/tv2012pad.roilabels.txt"
            input = [
                roiLabels = [
                    dim = $TrainROILabelDim$
                    format = "dense"
                ]
            ]
        ]:[
            type = "ImageDeserializer" ; module = "ImageReader"
            #file="$dataDir$/1k_train_stage2.txt"
            file="$dataDir$/tv2012pad.txt"
            input = [
                features = [ transforms = (
                    #[ type = "ScaleSide" ; target = $ImageW$ ; side = "max" ]:
                    [ type = "Pad" ; width = $ImageW$ ; height = $ImageH$; channels = $ImageC$; value = 114 ]:
                    [ type = "Mean" ; meanFile = "$rootDir$/ImageNet500_mean.xml" ]
                    [ type = "Transpose" ]
                )]
                ignored=[labelDim=1000]
            ]
        ])
    ]
]
